package lunzn.com.pricticeapplication.activity;

import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.os.Handler;
import android.os.Message;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestOptions;
import com.lunzn.tool.log.LogUtil;
import com.platfrom.sdk.bean.VideoDetail;
import com.platfrom.sdk.bean.VideoMini;

import java.util.List;

import lunzn.com.pricticeapplication.R;
import lunzn.com.pricticeapplication.base.BaseActivity;
import lunzn.com.pricticeapplication.biz.VideoDetailBiz;
import lunzn.com.pricticeapplication.contants.ContentType;
import lunzn.com.pricticeapplication.contants.MessageCodeContants;
import lunzn.com.pricticeapplication.datacache.VideoData;
import lunzn.com.pricticeapplication.interfaces.RefreshRecommendData;
import lunzn.com.pricticeapplication.views.RecommendView;

/**
 * Desc: 影片列表详情activity
 * <p>
 * Author: suhongpeng
 * PackageName: lunzn.com.pricticeapplication.activity
 * ProjectName: PricticeApplication
 * Date: 2019/2/25 10:05
 */
public class VideosDetailActivity extends BaseActivity implements View.OnClickListener, View.OnFocusChangeListener {

    // 显示图片
    private ImageView mImageView;

    // 影片名
    private TextView txtMvTitle;

    // 更新至第几集
    private TextView txtVolume;

    // 分数
    private TextView txtScore;

    // 地区、时间、影片类型
    private TextView txtATTL;

    // 演员
    private TextView txtActor;

    // 导演
    private TextView txtDirector;

    // 介绍
    private TextView txtIntroduce;

    // 播放按钮
    private Button btnPlay;

    // 选集
    private Button btnAnthology;

    // 追剧
    private Button btnBinge;

    // 评论
    private Button btnComment;

    // 剧照
    private Button btnPhotos;

    private RelativeLayout mRelativeLayout;

    private LinearLayout mLinearLayout;

    // 影片id
    private String mvid = null;

    // 类型id
    private String groupId = null;

    // 获取影片详情业务类
    private VideoDetailBiz mDetailBiz = null;

    VideoDetail mVideoDetail = null;

    // 影片推荐列表
    private List<VideoMini> mVideoMinis;

    // 影片位置
    private int position;

    // 影片类型
    private int contentType;

    // 影片推荐列表View
    private RecommendView mRecommendView;

    private PopupWindow mPopupWindow;

    // 根布局
    private View rootView;

    private HorizontalScrollView horizontalScrollView;

    private final static String TAG = "VoldumeList";

    @SuppressWarnings("handlerleak")
    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MessageCodeContants.GET_VIDEO_DETAIL_SUCCESS:
                    setVideoDetail();
                    break;
                case MessageCodeContants.GET_VIDEO_RECOMMEND_SUCCESS:
                    setVideoRecommend();
                    break;
            }
        }
    };

    /**
     * 设置影片推荐列表数据
     */
    private void setVideoRecommend() {
        mVideoMinis = VideoData.mVideoRecommendMap.get(groupId);
        LogUtil.i("mVideoMinis", mVideoMinis);
        // LinearLayout中存在view,先移除在添加
        if (mLinearLayout.getChildCount() > 0) {
            mLinearLayout.removeAllViews();
            setView(mVideoMinis);
        } else {
            setView(mVideoMinis);
        }
    }

    /**
     * 设置影片详情数据
     */
    private void setVideoDetail() {
        mVideoDetail = VideoData.mVideoDetailMap.get(groupId);
        RequestOptions requestOptions = new RequestOptions().placeholder(R.mipmap.movie_default_icon_comm).dontAnimate();
        Glide.with(mRelativeLayout).load(mVideoDetail.getImgpath()).apply(requestOptions).into(mImageView);
        txtMvTitle.setText(mVideoDetail.getMvname());
        // 电影
        if (contentType == ContentType.PAGE_CONTENT_MOVIE) {
            txtVolume.setVisibility(View.GONE);
            btnAnthology.setVisibility(View.GONE);
            btnPlay.setText("播放");
            btnBinge.setText("收藏");
            btnComment.setText("评论");
            btnPhotos.setText("剧照");
        } else {
            // 如果当前集数等于最大集数
            if (mVideoDetail.getCurrentVolume() == mVideoDetail.getMaxVolume()) {
                txtVolume.setText(mVideoDetail.getMaxVolume() + "集全");
            } else {
                txtVolume.setText("更新至" + mVideoDetail.getCurrentVolume() + "集");
            }
        }
        // 如果评分不为0
        if (!"0.0".equals(mVideoDetail.getScore())) {
            txtScore.setVisibility(View.VISIBLE);
            txtScore.setText(mVideoDetail.getScore());
        }
        txtATTL.setText(mVideoDetail.getType() + " / " + mVideoDetail.getReleaseTime().substring(0, 4) + " / " + mVideoDetail.getLanguage() + " / " + mVideoDetail.getArea());
        txtDirector.setText("导演：" + mVideoDetail.getDirector());
        txtActor.setText("演员：" + mVideoDetail.getActor());
        txtIntroduce.setText("简介：" + mVideoDetail.getIntroduction());
    }

    @Override
    protected int getRootId() {
        return R.layout.activity_videos_detail_layout;
    }

    @Override
    protected void initData() {
        mDetailBiz = new VideoDetailBiz(mHandler);
        Intent intent = getIntent();
        mvid = intent.getStringExtra("mvid");
        groupId = intent.getStringExtra("groupid");
        position = intent.getIntExtra("position", 0);
        contentType = intent.getIntExtra("contentType", 0);
        mDetailBiz.getVideoProperty(mvid, groupId);
        mDetailBiz.getVideoRecommend(mvid, groupId);

    }

    @Override
    protected void initView() {
        rootView = findViewById(R.id.rl_detail);
        btnAnthology = findViewById(R.id.btn_anthology);
        btnPlay = findViewById(R.id.btn_first_episode);
        btnPhotos = findViewById(R.id.btn_photos);
        btnComment = findViewById(R.id.btn_comment);
        btnBinge = findViewById(R.id.btn_binge_watching);
        mImageView = findViewById(R.id.iv_detail_image);
        txtMvTitle = findViewById(R.id.tv_detail_title);
        txtVolume = findViewById(R.id.tv_detail_volume);
        txtScore = findViewById(R.id.tv_detail_score);
        txtATTL = findViewById(R.id.tv_area_time_type_language);
        txtActor = findViewById(R.id.tv_actor);
        txtDirector = findViewById(R.id.tv_director);
        txtIntroduce = findViewById(R.id.tv_introduce);
        mRelativeLayout = findViewById(R.id.rl_detail);
        mLinearLayout = findViewById(R.id.ll_video_recommend);

    }

    /**
     * 往LinearLayout中添加view
     *
     * @param videoList 列表数据
     */
    private void setView(List<VideoMini> videoList) {
        for (int i = 0; i < videoList.size(); i++) {
            mRecommendView = new RecommendView(VideosDetailActivity.this, videoList, i);
            mLinearLayout.addView(mRecommendView.getRootView());
            mRecommendView.setRecommendData(new RefreshRecommendData() {
                @Override
                public void refreshData(int position, List<VideoMini> mVideoList) {
                    VideoMini video = mVideoList.get(position);
                    mDetailBiz.getVideoProperty(video.getMvid(), video.getGroupid());
                    mDetailBiz.getVideoRecommend(video.getMvid(), video.getGroupid());
                }
            });
        }
    }


    @Override
    protected void initListener() {
        txtIntroduce.setOnClickListener(this);
        btnAnthology.setOnClickListener(this);
        btnBinge.setOnClickListener(this);
        btnComment.setOnClickListener(this);
        btnPhotos.setOnClickListener(this);
        btnPlay.setOnClickListener(this);
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tv_introduce:
                Intent intent = new Intent(VideosDetailActivity.this, VideoIntroduceActivity.class);
                intent.putExtra("videoTitle", mVideoDetail.getMvname());
                intent.putExtra("videoIntroduce", mVideoDetail.getIntroduction());
                startActivity(intent);
                break;
            case R.id.btn_first_episode:
                Intent intent1 = new Intent(VideosDetailActivity.this, VideoPlayAcyivity.class);
                startActivity(intent1);
                break;
            case R.id.btn_anthology:
                initPopupWindow();
                break;
            case R.id.btn_binge_watching:
                if ("追剧".equals(btnBinge.getText().toString())) {
                    btnBinge.setText("已追剧");
                } else if ("已追剧".equals(btnBinge.getText().toString())) {
                    btnBinge.setText("追剧");
                } else if ("收藏".equals(btnBinge.getText().toString())) {
                    btnBinge.setText("已收藏");
                } else {
                    btnBinge.setText("收藏");
                }
                break;
            case R.id.btn_comment:
                Intent intent3 = new Intent(VideosDetailActivity.this, VideoCommentActivity.class);
                intent3.putExtra("videoTitle", mVideoDetail.getMvname());
                intent3.putExtra("videoComment", mVideoDetail.getIntroduction());
                startActivity(intent3);
                break;
            case R.id.btn_photos:
                Intent intent2 = new Intent(this, VideoPhotosActivity.class);
                startActivity(intent2);
                break;
            default:

                break;
        }
    }

    /**
     * 初始化popupwindow
     */
    private void initPopupWindow() {
        mPopupWindow = new PopupWindow();
        FrameLayout volumeView = (FrameLayout) LayoutInflater.from(this).inflate(R.layout.volume_list_layout, null);
        mPopupWindow.setContentView(volumeView);
        mPopupWindow.setWidth(1280);
        mPopupWindow.setHeight(120);
        //为了防止弹出菜单获取焦点之后，点击activity的其他组件没有响应
        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());
        // 设置焦点
        mPopupWindow.setFocusable(true);
        mPopupWindow.setAnimationStyle(R.style.menuAnimation);
        mPopupWindow.showAtLocation(rootView, Gravity.BOTTOM, 0, 0);
        setVolume(volumeView);
        setChooseVolume(volumeView);

    }

    /**
     * 设置集数
     *
     * @param volumeView 父布局
     */
    private void setVolume(FrameLayout volumeView) {
        final HorizontalScrollView scrollView = volumeView.findViewById(R.id.hsv_volume_choose);
        // 集数RadioGroup
        final RadioGroup radioGroup;
        radioGroup = volumeView.findViewById(R.id.rg_volume);
        final int volume = Integer.parseInt(mVideoDetail.getCurrentVolume());
        for (int i = 0; i < volume; i++) {
            final RadioButton radioButton = new RadioButton(this);
            radioButton.setGravity(Gravity.CENTER);
            RadioGroup.LayoutParams layoutParams = new RadioGroup.LayoutParams(RadioGroup.LayoutParams.WRAP_CONTENT, 50);
            layoutParams.setMargins(6, 0, 0, 0);
            layoutParams.height = 30;
            layoutParams.width = 100;
            radioButton.setLayoutParams(layoutParams);
            radioButton.setText("第" + (i + 1) + "集");
            radioButton.setTextSize(22);
            radioButton.setTag(i);
            // 获得焦点时UI的变化
            radioButton.setBackground(getResources().getDrawable(R.drawable.radiobtn_selector));
            radioButton.setTextColor(getResources().getColor(R.color.colorGrayWhite));
            //隐藏单选圆形按钮
            radioButton.setButtonDrawable(android.R.color.transparent);
            radioButton.setFocusable(true);
            radioGroup.addView(radioButton);
            radioButton.setOnFocusChangeListener(new View.OnFocusChangeListener() {
                @Override
                public void onFocusChange(View v, boolean hasFocus) {
                    int index = (int) v.getTag();
                    if (hasFocus && index == 91) {
                        int x = (int) v.getX();
                        scrollView.scrollTo(x, 0);
                    }
                }
            });
        }
    }

    /**
     * 设置选择集数
     *
     * @param volumeView 父布局
     */
    private void setChooseVolume(FrameLayout volumeView) {
        horizontalScrollView = volumeView.findViewById(R.id.hsv_volume);
        // 集数RadioGroup
        final RadioGroup radioGroup;
        radioGroup = volumeView.findViewById(R.id.rg_volume_choose);
        int volume = Integer.parseInt(mVideoDetail.getCurrentVolume());
        int count = 0;
        if (volume <= 10) {   // 集数小于等于10
            count = 1;
        } else if (volume > 10 && volume % 10 == 0) { // 集数大于10并且是10的倍数
            count = volume / 10;
        } else {     // 如果集数不是10的倍数，radiobutton数量加1
            count = volume / 10 + 1;
        }
        for (int i = 0; i < count; i++) {
            final RadioButton radioButton = new RadioButton(this);
//            radioButton.setPadding(22, -2, 0, 0);
            RadioGroup.LayoutParams layoutParams = new RadioGroup.LayoutParams(RadioGroup.LayoutParams.WRAP_CONTENT, 50);
            layoutParams.setMargins(6, 0, 0, 0);
            layoutParams.height = 30;
            layoutParams.width = 100;
            // 设置内容居中
            radioButton.setGravity(Gravity.CENTER);
            radioButton.setLayoutParams(layoutParams);
            if (volume <= 10) {   // 集数小于等于10
                radioButton.setText("1 - " + volume);
            } else if (volume > 10 && volume % 10 == 0) {   // 集数大于10并且是10的倍数
                radioButton.setText((i * 10 + 1) + " - " + (i + 1) * 10);
            } else if (i == count - 1) {    // 如果集数不是10的倍数，并且是最后一个radioButton
                radioButton.setText((i * 10 + 1) + " - " + (i * 10 + volume % 10));
            } else {
                radioButton.setText((i * 10 + 1) + " - " + (i + 1) * 10);
            }
            radioButton.setTextSize(22);
            radioButton.setBackground(getResources().getDrawable(R.drawable.radiobtn_selector));
            radioButton.setTextColor(getResources().getColor(R.color.colorGrayWhite));
            radioButton.setButtonDrawable(android.R.color.transparent);//隐藏单选圆形按钮
            radioButton.setFocusable(true);
            radioGroup.addView(radioButton);
            radioButton.setOnFocusChangeListener(this);
        }
    }


    @Override
    public void onBackPressed() {
        if (mPopupWindow != null && mPopupWindow.isShowing()) {
            mPopupWindow.dismiss();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onFocusChange(View v, boolean hasFocus) {
        if (hasFocus) {
            int x = (int) v.getX();
            // 设置scrollView滚动到指定位置
            horizontalScrollView.scrollTo(10 * x - 60, 0);
        }
    }
}
